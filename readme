User Records Management
This project is a full-stack application designed to manage user records. It includes a backend API built with Node.js and Express, and a frontend interface using HTML and JavaScript. The backend handles database interactions and API endpoints, while the frontend displays user data and provides functionality to generate random users.


Project Structure
Backend
connectMongodb.js: Establishes a connection to the MongoDB database.
controller.js: Contains functions for populating the database with random users and retrieving users from the database.
route.js: Defines routes for the API endpoints.
app.js: Sets up the Express application, connects to the database, and starts the server.

Frontend
index.html: The main HTML file that sets up the user interface.
script.js: Handles fetching and displaying user data and generating random users via API calls.


Usage
Populate the Database
Click the "Generate Random Users" button on the frontend interface to populate the database with 10 random users. The button click will trigger the creation of new user data in the backend and update the user list displayed on the frontend.

Fetch and Display Users
On page load, the frontend will automatically fetch and display the user data from the backend. When new users are generated by clicking the "Generate Random Users" button, the frontend will also fetch and display the updated user data immediately.


API Endpoints
POST /populate: Generates 10 random users and populates the database.
GET /users: Retrieves all users from the database.


Run the Backend Server:
Start the backend server using the following command. The server will run on http://localhost:8000.
Serve the Frontend:
open index.html in your browser to interact with the application.

Generating and Displaying User Data
1. On Page Load: The frontend will automatically fetch and display the existing user data from the backend.
2. On Button Click: When you click the "Generate Random Users" button, the frontend sends a request to the backend to generate 10 random users. After the users are generated, the frontend fetches the updated user list and displays it in the table.


